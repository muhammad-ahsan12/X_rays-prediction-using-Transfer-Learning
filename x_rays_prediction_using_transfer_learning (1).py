# -*- coding: utf-8 -*-
"""X rays prediction using transfer learning.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12G5a7eS82d7avL1EJTd724hiKZlonGf8
"""

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/

!kaggle datasets download -d paultimothymooney/chest-xray-pneumonia

import zipfile
zip_ref = zipfile.ZipFile('/content/chest-xray-pneumonia.zip', 'r')
zip_ref.extractall('/content')
zip_ref.close

import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from tensorflow.keras.applications.mobilenet_v2 import MobileNetV2
from tensorflow.keras.preprocessing import image
from tensorflow.keras.applications.vgg16 import preprocess_input
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Flatten
from sklearn.metrics import confusion_matrix

train_datagen = ImageDataGenerator(rescale=1./255,
                                   horizontal_flip = True,
                                   zoom_range = 0.2,
                                   shear_range =0.2)
val_datagen = ImageDataGenerator(rescale=1./255)

train_data = train_datagen.flow_from_directory(
    '/content/chest_xray/train',
    target_size=(224, 224),
    batch_size=32,
    class_mode='binary'
)

val_data = val_datagen.flow_from_directory(
    '/content/chest_xray/val',
    target_size=(224, 224),
    batch_size=32,
    class_mode='binary'
)

X_train, y_train = train_data.next()
X_val, y_val = val_data.next()

print(X_train.shape)
print(y_train.shape)
print(X_val.shape)
print(y_val.shape)

from ast import Index
class_names = ['Normal','Pnamonia']
def show_image(X_train,y_train, index):
    y_train = y_train.astype(int)
    plt.imshow(X_train[index])
    plt.axis('off')
    plt.title(class_names[y_train[index]])
    plt.show()

import random
random_index = random.randint(0,len(X_train))
show_image(X_train,y_train,random_index)

mbl_model = MobileNetV2(weights='imagenet', include_top=False, input_shape=(224, 224, 3))

mbl_model.summary()

model = Sequential()
model.add(mbl_model)
model.add(Flatten())
model.add(Dense(256,activation='relu'))
model.add(Dense(1, activation='sigmoid'))

mbl_model.trainable = False

model.summary()

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit_generator(train_data, epochs=10, validation_data=val_data)

plt.plot(model.history.history['accuracy'])
plt.plot(model.history.history['val_accuracy'])
plt.title('model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'val'], loc='upper left')
plt.show()

plt.plot(model.history.history['loss'])
plt.plot(model.history.history['val_loss'])
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'val'], loc='upper left')
plt.show()

model.evaluate_generator(val_data)

model.evaluate(X_val, y_val)

model.save('TL_X_rays_model.h5')

from re import T
from PIL import Image
image = Image.open('/content/normal.jpeg')
image = image.resize((224,224))
image = np.array(image)
image = image/255
image = np.expand_dims(image, axis=0)
plt.imshow(image[0])
plt.show()
prediction = model.predict(image)
if prediction[0] > 0.5:
    print("Prediction: Pneumonia")
else:
    print("Prediction: Normal")

val_data.class_indices

test_datagen = ImageDataGenerator(rescale=1./255)
test_data = test_datagen.flow_from_directory(
    '/content/chest_xray/test',
    target_size=(224, 224),
    batch_size=32,
    class_mode='binary')

model.evaluate(test_data)

true_labels = test_data.labels
pred_labels = np.squeeze(np.array(model.predict(test_data) >= 0.5))

cm = confusion_matrix(true_labels, pred_labels)

test_data.class_indices

plt.figure(figsize=(6, 6))
sns.heatmap(cm, annot=True, fmt='g', vmin=0, cmap='mako', cbar=False)
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.xticks(np.arange(2) + 0.5, ['Normal', 'Pneumonia'], fontsize=16)
plt.yticks(np.arange(2) + 0.5, ['Normal', 'Pneumonia'], fontsize=16)
plt.show()

results = model.evaluate(test_data)

accuracy = results[1]
# auc = results[2]

tn, fp, fn, tp = cm.ravel()

precision = tp / (tp + fp)
recall = tp / (tp + fn)

print("Accuracy: {:.2f}".format(accuracy))
# print("AUC: {:.2f}".format(auc))
print("Precision: {:.2f}".format(precision))
print("Recall: {:.2f}".format(recall))

